{"version":3,"sources":["feedback/controls.js","feedback/statistik.js","feedback/feedback.js","App.js","index.js"],"names":["Controls","goodIncrement","neutralIncrement","badIncrement","class","type","onClick","Statistik","good","neutral","bad","total","positivePercentage","prototype","PropTypes","number","feedback","state","props","initialValue","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","React","Component","defaultProps","App","className","ReactDOM","render","document","querySelector"],"mappings":"6QAceA,EAbE,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,iBAAkBC,EAApC,EAAoCA,aAApC,OACf,sBAAKC,MAAM,mBAAX,UACE,wBAAQA,MAAM,SAASC,KAAK,SAASC,QAASL,EAA9C,kBAGA,wBAAQG,MAAM,SAASC,KAAK,SAASC,QAASJ,EAA9C,qBAGA,wBAAQE,MAAM,SAASC,KAAK,SAASC,QAASH,EAA9C,qB,gBCNEI,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OAChB,sBAAKR,MAAM,YAAX,UACE,uBAAMA,MAAM,OAAZ,mBAA0BI,KAC1B,uBAAMJ,MAAM,UAAZ,sBAAgCK,KAChC,uBAAML,MAAM,MAAZ,kBAAwBM,KACxB,uBAAMN,MAAM,QAAZ,oBAA4BO,KAC5B,uBAAMP,MAAM,WAAZ,+BAA0CQ,EAA1C,WAGJL,EAAUM,UAAY,CACpBL,KAAMM,IAAUC,OAChBN,QAASK,IAAUC,OACnBL,IAAKI,IAAUC,OACfJ,MAAOG,IAAUC,OACjBH,mBAAoBE,IAAUC,QAEjBR,QCbTS,G,kNAIJC,MAAQ,CACNT,KAAM,EAAKU,MAAMC,aACjBV,QAAS,EAAKS,MAAMC,aACpBT,IAAK,EAAKQ,MAAMC,c,EAElBlB,cAAgB,WACd,EAAKmB,UAAS,SAAAC,GAAS,MAAK,CAC1Bb,KAAMa,EAAUb,KAAO,O,EAG3BN,iBAAmB,WACjB,EAAKkB,UAAS,SAAAC,GAAS,MAAK,CAC1BZ,QAASY,EAAUZ,QAAU,O,EAGjCN,aAAe,WACb,EAAKiB,UAAS,SAAAC,GAAS,MAAK,CAC1BX,IAAKW,EAAUX,IAAM,O,EAGzBY,mBAAqB,WACnB,MAA+B,EAAKL,MAEpC,OAFA,EAAQT,KAAR,EAAcC,QAAd,EAAuBC,K,EAKzBa,gCAAkC,WAChC,IAAMZ,EAAQ,EAAKW,qBACnB,OAAOE,KAAKC,MAAyB,IAAlB,EAAKR,MAAMT,KAAcG,I,4CAG9C,WACE,IAAMA,EAAQe,KAAKJ,qBACbV,EAAqBc,KAAKH,kCAChC,OACE,gCACE,yDACA,cAAC,EAAD,CACEtB,cAAeyB,KAAKzB,cACpBC,iBAAkBwB,KAAKxB,iBACvBC,aAAcuB,KAAKvB,eAEV,IAAVQ,EACC,mDAEA,cAAC,EAAD,CACEH,KAAMkB,KAAKT,MAAMT,KACjBC,QAASiB,KAAKT,MAAMR,QACpBC,IAAKgB,KAAKT,MAAMP,IAChBC,MAAOA,EACPC,mBAAoBA,W,GAtDTe,IAAMC,YAAvBZ,EACGa,aAAe,CACpBV,aAAc,GA2DHH,QC/DA,SAASc,IACtB,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,MCFNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.7a81ecb2.chunk.js","sourcesContent":["import React from 'react';\r\nconst Controls = ({ goodIncrement, neutralIncrement, badIncrement }) => (\r\n  <div class='conteiner-button'>\r\n    <button class=\"button\" type=\"button\" onClick={goodIncrement}>\r\n      Good\r\n    </button>\r\n    <button class=\"button\" type=\"button\" onClick={neutralIncrement}>\r\n      Neutral\r\n    </button>\r\n    <button class=\"button\" type=\"button\" onClick={badIncrement}>\r\n      Bad\r\n    </button>\r\n  </div>\r\n);\r\nexport default Controls;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistik = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <div class='statistik'>\r\n    <span class='good'>Good: {good}</span>\r\n    <span class='neutral'>Neutral: {neutral}</span>\r\n    <span class=\"bad\">Bad: {bad}</span>\r\n    <span class='total'>Total: {total}</span>\r\n    <span class='positive'>PositiveFeedback: {positivePercentage}%</span>\r\n  </div>\r\n);\r\nStatistik.prototype = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\nexport default Statistik;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Controls from './controls.js';\r\nimport Statistik from './statistik.js';\r\nimport FeedbacksModule from './feedbackModule.css'\r\n\r\nclass feedback extends React.Component {\r\n  static defaultProps = {\r\n    initialValue: 0,\r\n  };\r\n  state = {\r\n    good: this.props.initialValue,\r\n    neutral: this.props.initialValue,\r\n    bad: this.props.initialValue,\r\n  };\r\n  goodIncrement = () => {\r\n    this.setState(prevState => ({\r\n      good: prevState.good + 1,\r\n    }));\r\n  };\r\n  neutralIncrement = () => {\r\n    this.setState(prevState => ({\r\n      neutral: prevState.neutral + 1,\r\n    }));\r\n  };\r\n  badIncrement = () => {\r\n    this.setState(prevState => ({\r\n      bad: prevState.bad + 1,\r\n    }));\r\n  };\r\n  countTotalFeedback = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    const result = good + neutral + bad;\r\n    return result;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const total = this.countTotalFeedback();\r\n    return Math.round((this.state.good * 100) / total);\r\n  };\r\n\r\n  render() {\r\n    const total = this.countTotalFeedback();\r\n    const positivePercentage = this.countPositiveFeedbackPercentage();\r\n    return (\r\n      <div>\r\n        <span>Please leave feedback</span>\r\n        <Controls\r\n          goodIncrement={this.goodIncrement}\r\n          neutralIncrement={this.neutralIncrement}\r\n          badIncrement={this.badIncrement}\r\n        />\r\n        {total === 0 ? (\r\n          <p>No feedback given!</p>\r\n        ) : (\r\n          <Statistik\r\n            good={this.state.good}\r\n            neutral={this.state.neutral}\r\n            bad={this.state.bad}\r\n            total={total}\r\n            positivePercentage={positivePercentage}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default feedback;\r\n","import React from 'react';\nimport './App.css';\nimport Feedback from './feedback/feedback.js';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Feedback/>\n    </div>\n  );\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}